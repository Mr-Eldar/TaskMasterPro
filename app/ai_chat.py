from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from app.states import AiChat, WaitGenerator
from app.generators import text_generator

ai = Router()

# def escape_markdown(text: str) -> str:
#     """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
#     escape_chars = r'_*[]()~`>#+-=|{}.!'
#     return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def send_long_message(message: Message, text: str, parse_mode: ParseMode = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏"""
    try:
        if len(text) <= 4000:
            await message.answer(text, parse_mode=parse_mode)
            return
        
        chunks = [text[i:i+4000] for i in range(0, len(text), 4000)]
        
        for i, chunk in enumerate(chunks):
            if i == 0:
                await message.answer(chunk, parse_mode=parse_mode)
            else:
                prefix = "*(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)*\n" if parse_mode == ParseMode.MARKDOWN else "<i>(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)</i>\n"
                await message.answer(f"{prefix}{chunk}", parse_mode=parse_mode)
                
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if "can't parse entities" in str(e):
            safe_text = parse_mode == ParseMode.MARKDOWN else text
            
            if len(safe_text) <= 4000:
                await message.answer(safe_text)
            else:
                chunks = [safe_text[i:i+4000] for i in range(0, len(safe_text), 4000)]
                for i, chunk in enumerate(chunks):
                    if i == 0:
                        await message.answer(chunk)
                    else:
                        await message.answer(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{chunk}")
        else:
            raise e


@ai.message(Command('ai_chat'))
@ai.message(F.text == '—á–∞—Ç —Å –ò–ò üí¨')
async def start_chat(message: Message, state: FSMContext):
    await message.answer('üåü –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, –Æ–ù–´–ô –ü–ê–î–ê–í–ê–ù –ó–ù–ê–ù–ò–ô! üåü\n\n'
    '<b>–Ø ‚Äî –ú–∞—Å—Ç–µ—Ä –ô–æ–¥–∞, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä–µ —É—á—ë–±—ã, –ø–ª–∞–Ω–æ–≤ –∏ –ø–æ–±–µ–¥ –Ω–∞–¥ –ª–µ–Ω—å—é! üßô‚Äç‚ôÇÔ∏è‚ú®'
    '–ú—É–¥—Ä—ã–π, –∫–∞–∫ 900-–ª–µ—Ç–Ω–∏–π –¥–∂–µ–¥–∞–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫–∞–∫ –ß—É–±–∞–∫–∫–∞ –ø–æ—Å–ª–µ —á–∞—à–∫–∏ –∫–∞–∫–∞–æ, –∏ —Å—Ç—Ä–æ–≥–∏–π, –∫–∞–∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä –Ω–∞ –û–ì–≠ (–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–¥–æ!).</b>\n\n', parse_mode=ParseMode.HTML)
    await message.answer('üîÆ –ß–¢–û –Ø –£–ú–ï–Æ (–∏ —á–µ–º –ø–æ–º–æ–≥—É —Ç–µ–±–µ):\n'
    '‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ‚Äî —Ö–æ—Ç—å –∫ –û–ì–≠, —Ö–æ—Ç—å –∫ –±–∏—Ç–≤–µ —Å–æ –ó–≤–µ–∑–¥–æ–π –°–º–µ—Ä—Ç–∏ (–Ω—É –∏–ª–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–æ –∞–ª–≥–µ–±—Ä–µ).\n'
    '‚úÖ –û–±—ä—è—Å–Ω—è—Ç—å —Ç–µ–º—ã "—Å –Ω—É–ª—è" ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ –≥–∏–ø–µ—Ä—Å–Ω–∞ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—à—å ("–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç? –≠—Ç–æ —á—Ç–æ, –Ω–æ–≤—ã–π –≤–∏–¥ –¥—Ä–æ–∏–¥–æ–≤?").\n'
    '‚úÖ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚Äî –∫–æ–≥–¥–∞ –ª–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç, –∫–∞–∫ –∞—Ä–º–∏—è –∫–ª–æ–Ω–æ–≤, —è –Ω–∞–ø–æ–º–Ω—é: "–î–µ–ª–∞–π –∏–ª–∏ –Ω–µ –¥–µ–ª–∞–π ‚Äî –Ω–æ –Ω–µ –±—Ä–æ—Å–∞–π –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ!"\n'
    '‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî —á—Ç–æ–±—ã —Ç—ã —É—Å–ø–µ–≤–∞–ª –≤—Å—ë: –∏ —É—á–∏—Ç—å—Å—è, –∏ –æ—Ç–¥—ã—Ö–∞—Ç—å ("–î–∞, —Å–ø–∞—Ç—å —Ç–æ–∂–µ –Ω–∞–¥–æ! –î–∞–∂–µ –¥–∂–µ–¥–∞—è–º!").\n'
    '‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ö–æ—Ç—å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ö–æ—Ç—å –ø–æ –∂–∏–∑–Ω–∏ ("–ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã? –ö–∞–∫ –Ω–µ —Å–ø–∞–ª–∏—Ç—å —É–∂–∏–Ω, –ø–æ–∫–∞ —É—á–∏—à—å —Ñ–æ—Ä–º—É–ª—ã?").', parse_mode=ParseMode.HTML)
    await message.answer('üåø –ù–ê–ß–ù–Å–ú?\n'
    '<b>–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–æ–≥–æ, –∫—Ç–æ –≥–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä–∏—Ç—å —É—á—ë–±—É —Å–æ –º–Ω–æ–π?</b> üòä'
    '<b>(–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å! "–ü–ª–∞–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", "–û–±—ä—è—Å–Ω–∏ —Ñ–∏–∑–∏–∫—É", "–ö–∞–∫ –Ω–µ –∑–∞—Å–Ω—É—Ç—å –Ω–∞ —É—Ä–æ–∫–µ –∏—Å—Ç–æ—Ä–∏–∏" ‚Äî —è –Ω–∞ –≤—Å—ë –æ—Ç–≤–µ—á—É!)</b>\n\n'
    
    '‚ú® –ü–û–ú–ù–ò:\n'
    '<b>–¢—Ä—É–¥–Ω–æ ‚Äî –Ω–µ –∑–Ω–∞—á–∏—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –Ω–µ –∑–Ω–∞—á–∏—Ç –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. –ê –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ‚Äî —É–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–±–µ–¥—ã!</b>\n\n'
    
    '<b>‚Äî –ú–∞—Å—Ç–µ—Ä –ô–æ–¥–∞ (–∏ —Ç–≤–æ–π –Ω–æ–≤—ã–π –ª—É—á—à–∏–π –¥—Ä—É–≥ –≤ —É—á—ë–±–µ). üöÄ</b>\n\n'
    
    '---'
    '<b>P.S. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—É–¥–µ—à—å, –∫–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ô–æ–¥–∞, –ø–æ–º–æ–≥–∏!" –ò —è –ø—Ä–∏–¥—É –Ω–∞ –ø–æ–º–æ—â—å, –∫–∞–∫ Han Solo –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç. üòâ</b>', parse_mode=ParseMode.HTML)

    await message.answer('<b>–ù–æ –∑–Ω–∞–π —è —Ö—Ä–∞–Ω—é –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ –µ—Å–ª–∏ —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –¥–∏–∞–ª–æ–≥ —Ç–æ —è –∑–∞–±—É–¥—É –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –£–∂ –ø—Ä–æ—Å—Ç–∏ –º–Ω–µ —É–∂–µ 900 –ª–µ—Ç –∫–∞–∫ –Ω–∏ –∫–∞–∫.</b>', parse_mode=ParseMode.HTML)
    await state.set_state(AiChat.start_chat)


@ai.message(Command('stop_ai'))
async def stop_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ß–∞—Ç —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω.')


@ai.message(AiChat.start_chat)
async def chatting(message: Message, state: FSMContext):
    data = await state.get_data()
    history = data.get('chat_history', [])
    
    history.append(f"User: {message.text}")
    
    await state.set_state(WaitGenerator.wait_generator)
    processing_msg = await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ‚åõÔ∏è')
    
    try:
        full_prompt = "\n".join(history)
        response = await text_generator(prompt=full_prompt)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        safe_response = response.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
        
        await send_long_message(message, ParseMode.MARKDOWN)
        
        history.append(f"AI: {response}")
        
        await state.update_data(chat_history=history[-100:])
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
    
    finally:
        await processing_msg.delete()
        await state.set_state(AiChat.start_chat)


@ai.message(WaitGenerator.wait_generator)
async def chatting_wait(message: Message, state: FSMContext):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')