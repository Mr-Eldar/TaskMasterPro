from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter

from app.database.requests import *
import app.keyboards as kb
import app.states as st
from app.generators import text_generation

user = Router()


@user.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>TaskMaster Pro</b> ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏!\n\n'
                        '‚ú® <b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å?</b>\n'
                        '‚úîÔ∏è –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏\n'
                        '‚úîÔ∏è –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n'
                        '‚úîÔ∏è –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n\n'
                        'üìå –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!\n\n'
                        'ü§ñ <b>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –µ—â—ë –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...</b>', reply_markup=kb.start_kb, parse_mode=ParseMode.HTML)
    await set_user(message.from_user.id)


@user.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer('üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é TaskMaster Pro</b>\n\n'
                        '–ó–¥–µ—Å—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:\n\n'
                        '‚úÖ <b>/tasks</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n'
                        'üìã <b>/chat</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ò–ò\n'
                        'üîÑ <b>/task_managment</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n\n'
                        'üí° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º ‚Äî –≤—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ!\n\n'
                        '<b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é</b>', reply_markup=kb.start_kb, parse_mode=ParseMode.HTML)


@user.message(Command('chat'))
@user.message(F.text == '–ò–ò üí¨')
async def cmd_ii_chat(message: Message, state: FSMContext):
    await state.set_state(st.Gen.startChat)
    await message.answer('ü§ñ <b>–î–∏–∞–ª–æ–≥ —Å –ò–ò</b>\n'
                        '–ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –æ—Ç –ø–æ–≥–æ–¥—ã –¥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–æ —Å–æ–≤–µ—Ç–æ–≤'
                        '–ò–ò –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–º–æ—á—å —Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.\n\n'
                        'üí¨ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å ‚Äî –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç!</b>', reply_markup=kb.stop_chat, parse_mode=ParseMode.HTML)


@user.message(F.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå')
async def stop_chat(message: Message, state: FSMContext):
    await message.answer('–î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–∫–æ–Ω—á–µ–Ω ‚úÖ')
    await state.clear()


@user.message(StateFilter(st.Gen.startChat))
async def generating(message: Message, state: FSMContext):
    await state.set_state(st.Gen.wait)
    response = await text_generation(message.text)
    await message.answer(response, parse_mode=ParseMode.MARKDOWN)
    await state.set_state(st.Gen.startChat)


@user.message(StateFilter(st.Gen.wait))
async def waiting_text_generation(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚åõÔ∏è')


@user.message(Command('tasks'))
@user.message(F.text == '–ó–∞–¥–∞—á–∏ üìù')
@user.callback_query(F.data == 'categories')
async def cmd_tasks(event: Message | CallbackQuery):
    if isinstance(event, Message):
        user_id = await get_user_id_by_tg_id(event.from_user.id)

        if user_id is None:
            await event.answer("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        await event.answer_sticker(sticker='CAACAgUAAxkBAAEPAZJogUkSBVK_3SoQIsgrQZS5V3ugswACHQ0AAsWB2VXEazw9gagmazYE')
        await event.answer('üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n\n'
                        '–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n'
                        '‚ÑπÔ∏è <i>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>–£–ø–∞—Ä–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</b> –∏–ª–∏ <b>/task_management:</b></i>.',
                        reply_markup=await kb.tasks(user_id), parse_mode=ParseMode.HTML)
    else:
        user_id = await get_user_id_by_tg_id(event.from_user.id)

        if user_id is None:
            await event.answer("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        await event.answer()
        await event.message.edit_text('<b>üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n'
                        '–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n'
                        '‚ÑπÔ∏è <i>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>–£–ø–∞—Ä–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</b> –∏–ª–∏ <b>/task_management:</b></i>.',
                        reply_markup=await kb.tasks(user_id), parse_mode=ParseMode.HTML)


@user.message(Command('task_management'))
@user.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ ‚öôÔ∏è')
async def cmd_tasks_management(message: Message):
    await message.answer_sticker(sticker='CAACAgUAAxkBAAEPAZBogUHWO-e8KEIvyze7UBcvq9xVmAAChg0AAizm0VTVsAdI2XV_6DYE')
    await message.answer('üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∞–º–∏</b>\n\n'
                        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞–Ω—ã.\n\n'
                        'üîπ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ</b>\n'
                        '–ó–∞–¥–∞—á–∞ ‚Äî –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–∑—É—á–∏—Ç—å TypeScript")\n'
                        '–ü–ª–∞–Ω ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ —Å 10:00 –¥–æ 12:00")\n\n'
                        'üîπ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</b>\n'
                        '–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ä–æ–∫–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n'
                        '–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ, —Ä–∞–∑–±–∏–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–∞–ø—ã\n\n'
                        'üîπ <b>–£–¥–∞–ª–µ–Ω–∏–µ</b>\n'
                        '–£–±–µ—Ä–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã\n\n'
                        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</b>',
                        reply_markup=kb.tasks_management_kb, parse_mode=ParseMode.HTML)


@user.callback_query(F.data.startswith('work_task_'))
async def cmd_get_work_tasks(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[2])
    await callback.answer('')
    await callback.message.delete()
    await callback.message.answer('üìÖ <b>–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n'
                                        '–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n'
                                        '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/task_management</b>.',
                                reply_markup=await kb.tasks_item(task_id, page=1), parse_mode=ParseMode.HTML)


@user.callback_query(F.data.startswith('task_item_'))
async def cmd_get_task_item_info(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.delete()

    parts = callback.data.split('_')
    category_id = int(parts[2])
    item_id = int(parts[3])

    task_item = await get_task_item_info(item_id)

    if task_item.status == True:
        await callback.message.answer_photo(photo=task_item.photo,
                                            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {task_item.name}\n\n'
                                                    f'{task_item.description}',
                                            reply_markup=await kb.task_item_buttons_complete(item_id, category_id))
    else:
        await callback.message.answer_photo(photo=task_item.photo,
                                            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {task_item.name}\n\n'
                                                    f'{task_item.description}',
                                            reply_markup=await kb.task_item_buttons(item_id, category_id))


@user.callback_query(F.data.startswith('set_status_'))
async def cmd_set_status(callback: CallbackQuery):
    await callback.answer('')
    task_id = int(callback.data.split('_')[2])
    category_id = int(callback.data.split('_')[-1])
    await set_status(task_id)
    info = await get_task_item_info(task_id)

    if info.status == True:
        await callback.message.edit_reply_markup(reply_markup=await kb.task_item_buttons_complete(task_id, category_id))
    else:
        await callback.message.edit_reply_markup(reply_markup=await kb.task_item_buttons(task_id, category_id))


@user.callback_query(F.data.startswith("page:"))
async def cmd_paginate_tasks(callback: CallbackQuery):
    _, category_id, page = callback.data.split(":")
    markup = await kb.tasks_item(int(category_id), int(page))
    await callback.message.edit_reply_markup(reply_markup=markup)
    await callback.answer()