import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from app.user import cmd_tasks_management
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from app.database.requests import *
import app.keyboards as kb
import app.states as st

tasks = Router()


async def delete_last_messages(bot: Message.bot, chat_id: int, from_message_id: int, count: int):
    for i in range(count):
        msg_id = from_message_id - i
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except TelegramBadRequest as e:
            pass
        except Exception as e:
            # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ message_id={msg_id}: {e}")


@tasks.callback_query(F.data == 'add_work_task')
async def cmd_add_new_category_process(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚ûï –î–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª!\n'
                                     '–£–∫–∞–∂–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å ‚Äî –∏ <b>–Ω–∞—á–Ω–∏ –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É</b> üìùüöÄ', parse_mode=ParseMode.HTML)
    await state.set_state(st.AddNewCategory.name)


@tasks.callback_query(F.data == 'add_work_task_item')
async def cmd_add_plan_process(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω üöÄ',
                                     reply_markup=await kb.select_tasks(callback.from_user.id))
    await state.set_state(st.AddNewCategoryPlan.category)


@tasks.callback_query(F.data == 'edit_work_task')
async def cmd_edit_work_task(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('‚ôªÔ∏è <b>–ü–µ—Ä–µ–¥—É–º–∞–ª? –ú–µ–Ω—è–µ–º!</b>\n'
                                     '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ ‚úçÔ∏è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ ‚úèÔ∏è –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n'
                                     '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ üÜî ID –∑–∞–¥–∞—á–∏ ‚Äî –∏ –≤–ø–µ—Ä—ë–¥!', reply_markup=await kb.select_tasks(callback.from_user.id), parse_mode=ParseMode.HTML)
    await state.set_state(st.EditWorkTask.category)


@tasks.callback_query(F.data == 'edit_work_task_item')
async def cmd_edit_task_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('‚ôªÔ∏è <b>–ü–µ—Ä–µ–¥—É–º–∞–ª? –ú–µ–Ω—è–µ–º!</b>\n'
                                     '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ ‚úçÔ∏è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–ª–∞–Ω –∏–ª–∏ ‚úèÔ∏è –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n'
                                     '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ üÜî ID –∑–∞–¥–∞—á–∏ ‚Äî –∏ –≤–ø–µ—Ä—ë–¥!', reply_markup=await kb.select_tasks(callback.from_user.id), parse_mode=ParseMode.HTML)
    await state.set_state(st.EditTaskItem.category)


@tasks.callback_query(F.data == 'remove_work_task')
async def cmd_delete_work_task_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('üóÇ –ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É? –°–º–µ–ª–æ —É–¥–∞–ª—è–π –∏ –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ üöÄ‚úÖ\n\n', reply_markup=await kb.select_tasks(callback.from_user.id))
    await state.set_state(st.DeleteWorkTasks.category)


@tasks.callback_query(F.data == 'remove_work_task_item')
async def cmd_delete_work_task_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('üóÇ –ó–∞–≤–µ—Ä—à–∏–ª –ø–ª–∞–Ω? –°–º–µ–ª–æ —É–¥–∞–ª—è–π –∏ –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ üöÄ‚úÖ\n\n'
                                     '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω üëá',
                                     reply_markup=await kb.select_tasks(callback.from_user.id))
    await state.set_state(st.DeleteTaskItem.category)


@tasks.callback_query(F.data.startswith('select_tasks_'), st.DeleteWorkTasks.category)
async def cmd_delete_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(category=callbackData)
    await callback.message.edit_text(f'–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑–≤–æ–∑—Ä–∞—Ç–Ω–æ ‚ÅâÔ∏è',
                                     reply_markup=kb.yes_or_no_kb)
    await state.set_state(st.DeleteWorkTasks.hisUnderstand)


@tasks.callback_query(F.data.startswith('select_tasks_'), st.DeleteTaskItem.category)
async def cmd_delete_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(category=callbackData)
    await callback.message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üëá',
                                     reply_markup=await kb.select_tasks_item(callbackData))
    await state.set_state(st.DeleteTaskItem.plan)


@tasks.callback_query(F.data.startswith('select_tasks_item_'), st.DeleteTaskItem.plan)
async def cmd_delete_plan_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(plan=callbackData)
    await callback.message.edit_text(f'–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω –±–µ–∑–≤–æ–∑—Ä–∞—Ç–Ω–æ ‚ÅâÔ∏è',
                                     reply_markup=kb.yes_or_no_kb)
    await state.set_state(st.DeleteTaskItem.hisUnderstand)


@tasks.callback_query(F.data.startswith('select_tasks_'), st.AddNewCategoryPlan.category)
async def cmd_select_tasks_process(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    category = int(callback.data.split('_')[-1])
    await state.update_data(category=category)
    await callback.message.edit_text('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å\n'
                                     '–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è ‚Äî <b>–±–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤—Ç—Ä–∞</b> üöÄ\n\n'
                                     '–î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ üìù', parse_mode=ParseMode.HTML)
    await state.set_state(st.AddNewCategoryPlan.name)


@tasks.callback_query(F.data.startswith('select_tasks_'), st.EditWorkTask.category)
async def cmd_edit_task_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(category=callbackData)
    await callback.message.edit_text(f'üÜï –ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∑–∞–¥–∞—á—É —Ç–µ–ø–µ—Ä—å?\n'
                                     f'–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ üìù\n'
                                     f'–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.')
    await state.set_state(st.EditWorkTask.new_name)


@tasks.callback_query(F.data.startswith('select_tasks_'), st.EditTaskItem.category)
async def cmd_edit_task_item_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(category=callbackData)
    await callback.message.edit_text('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá',
                                     reply_markup=await kb.select_tasks_item(callbackData))
    await state.set_state(st.EditTaskItem.plan)


@tasks.callback_query(F.data.startswith('select_tasks_item_'), st.EditTaskItem.plan)
async def cmd_edit_plan_process(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(plan=callbackData)
    await callback.message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá',
                                     reply_markup=kb.pick_tools_kb)
    await state.set_state(st.EditTaskItem.new_info)


@tasks.message(st.AddNewCategory.name)
async def cmd_add_precess(message: Message, state: FSMContext):
    await set_user(message.from_user.id)
    await state.update_data(name=message.text)
    data = await state.get_data()
    await add_work_task(data['name'], message.from_user.id)
    await message.answer('üéØ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–¥–∞–ª —Å–µ–±–µ –Ω–æ–≤—É—é —Ü–µ–ª—å\n'
                         '–°–¥–µ–ª–∞–π –µ—ë –¥–æ—Å—Ç–∏–∂–∏–º–æ–π ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º üî•')
    await asyncio.sleep(1)
    await cmd_tasks_management(message)


@tasks.message(st.AddNewCategoryPlan.name)
async def cmd_add_plan_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('üß† –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —à–∞–≥ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –¥–µ–Ω—å\n'
                         '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∑–∞—á–µ–º –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç –ø–ª–∞–Ω –∏ —á—Ç–æ –æ–Ω –¥–∞—ë—Ç üéØ')
    await state.set_state(st.AddNewCategoryPlan.description)


@tasks.message(st.AddNewCategoryPlan.description)
async def cmd_add_plan_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('üì∏ –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–¥–∞—á–µ\n'
                         '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚ú®')
    await state.set_state(st.AddNewCategoryPlan.photo)


@tasks.message(st.AddNewCategoryPlan.photo)
async def cmd_add_plan(message: Message, state: FSMContext):
    await set_user(message.from_user.id)
    if not message.photo:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ üñº')
        return
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    await add_task_item(data['category'], data['name'], data['description'], data['photo'])
    await message.answer('‚úÖ –ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω!\n'
                         '–®–∞–≥ –∫ —Ü–µ–ª–∏ –∑–∞–ø–∏—Å–∞–Ω ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å üí™')
    await state.clear()
    await asyncio.sleep(1)
    await cmd_tasks_management(message)


@tasks.message(st.EditWorkTask.new_name)
async def cmd_edit_task_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 ‚ùå\n\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ')
        return
    await state.update_data(new_name=message.text)
    await message.answer('–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ‚ÅâÔ∏è', reply_markup=kb.yes_or_no_kb)
    await state.set_state(st.EditWorkTask.hisUnderstand)


@tasks.callback_query(F.data.startswith('rename_'), st.EditTaskItem.new_info)
async def cmd_edit_task_info(callback: CallbackQuery, state: FSMContext):
    callbackData = callback.data.split('_')[-1]
    await state.update_data(pick_tools=callbackData)
    if callbackData == 'name':
        await callback.message.edit_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚úèÔ∏è')
    if callbackData == 'desc':
        await callback.message.edit_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚úèÔ∏è')
    await state.set_state(st.EditTaskItem.hisUnderstand)


@tasks.callback_query(st.DeleteWorkTasks.hisUnderstand)
async def cmd_delete_process(callback: CallbackQuery, state: FSMContext):
    await set_user(message.from_user.id)
    data = await state.get_data()

    if callback.data == 'yes':
        await callback.answer('–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üéâ')
        await delete_work_task(data['category'])
    elif callback.data == 'no':
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await delete_last_messages(
        bot=callback.message.bot,
        chat_id=callback.message.chat.id,
        from_message_id=callback.message.message_id,
        count=2
    )

    await state.clear()
    await cmd_tasks_management(callback.message)


@tasks.callback_query(st.DeleteTaskItem.hisUnderstand)
async def cmd_delete_process(callback: CallbackQuery, state: FSMContext):
    await set_user(message.from_user.id)
    data = await state.get_data()

    if callback.data == 'yes':
        await callback.answer('–ü–ª–∞–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üéâ')
        await delete_task_item(data['category'])
    elif callback.data == 'no':
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await delete_last_messages(
        bot=callback.message.bot,
        chat_id=callback.message.chat.id,
        from_message_id=callback.message.message_id,
        count=2
    )

    await state.clear()
    await cmd_tasks_management(callback.message)


@tasks.callback_query(st.EditWorkTask.hisUnderstand)
async def cmd_edit_process(callback: CallbackQuery, state: FSMContext):
    await set_user(message.from_user.id)
    data = await state.get_data()

    if callback.data == 'yes':
        await callback.answer('–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ üéâ')
        await rename_work_task(data['category'], data['new_name'])
    elif callback.data == 'no':
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await delete_last_messages(
        bot=callback.message.bot,
        chat_id=callback.message.chat.id,
        from_message_id=callback.message.message_id,
        count=4
    )

    await state.clear()
    await cmd_tasks_management(callback.message)


@tasks.message(st.EditTaskItem.hisUnderstand)
async def cmd_edit_task_process(message: Message, state: FSMContext):
    await state.update_data(new_info=message.text)
    await message.answer(f'–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω ‚ÅâÔ∏è',
                                     reply_markup=kb.yes_or_no_kb)
    await state.set_state(st.EditTaskItem.final)


@tasks.callback_query(st.EditTaskItem.final)
async def cmd_edit_task_process(callback: CallbackQuery, state: FSMContext):
    await set_user(callback.from_user.id)
    data = await state.get_data()
    await callback.answer()

    if callback.data == 'yes':
        if data['pick_tools'] == 'name':
            await update_work_task_item(data['plan'], new_name=data['new_info'])
        elif data['pick_tools'] == 'desc':
            await update_work_task_item(data['plan'], new_description=data['new_info'])
        await callback.answer('–ü–ª–∞–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ωüéâ')
    elif callback.data == 'no':
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await asyncio.sleep(0.5)

    await delete_last_messages(
        bot=callback.message.bot,
        chat_id=callback.message.chat.id,
        from_message_id=callback.message.message_id,
        count=4
    )

    await state.clear()
    await cmd_tasks_management(callback.message)


@tasks.callback_query(F.data == 'back_now')
async def back_now(callback: CallbackQuery):
    await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await delete_last_messages(
        bot=callback.message.bot,
        chat_id=callback.message.chat.id,
        from_message_id=callback.message.message_id,
        count=2
    )
    await cmd_tasks_management(callback.message)